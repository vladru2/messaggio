services:

  postgres:
    image: postgres:16
    environment:
       - POSTGRES_PASSWORD=rrpkRM5c5ujN
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: ./postgres-data
        target: /var/lib/postgresql/data
        bind:
          create_host_path: true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 10s
      retries: 10
  kafka:
    image: 'bitnami/kafka:latest'
    environment:
    # in development mode
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - target: 9092
        published: 9092
        protocol: tcp
        mode: host
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --topic messages --describe || kafka-topics.sh --bootstrap-server kafka:9092 --topic messages --create --if-not-exists"]
      interval: 1s
      timeout: 10s
      retries: 10
  app-main:
    build:
      context: ./app-main
      dockerfile: Dockerfile
    environment:
      - KAFKA=kafka:9092
      - HTTP_LISTEN_NETWORK=tcp
      - HTTP_LISTEN_ADDRESS=app-main:3000
      - BACKEND_DB_DSN=host=postgres user=postgres password=rrpkRM5c5ujN dbname=postgres port=5432 sslmode=disable TimeZone=Asia/Shanghai
      - BACKEND_DB_MAX_OPEN_CONN=5
      - BACKEND_DB_MAX_IDLE_CONN=5
      - BACKEND_DB_CONN_IDLE_SECONDS=5
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
        mode: host
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
  app-consumer:
    build:
      context: ./app-consumer
      dockerfile: Dockerfile
    environment:
      - KAFKA=kafka:9092
      - BACKEND_DB_DSN=host=postgres user=postgres password=rrpkRM5c5ujN dbname=postgres port=5432 sslmode=disable TimeZone=Asia/Shanghai
      - BACKEND_DB_MAX_OPEN_CONN=5
      - BACKEND_DB_MAX_IDLE_CONN=5
      - BACKEND_DB_CONN_IDLE_SECONDS=5
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy 
